name: Release

on:
  push:
  schedule:
    - cron: '0 0 * * 0'

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: upstream-version
        id: upstream-version
        run: |
          # Check latest github release check-version:
          upstream_latest=$(curl -s https://api.github.com/repos/fairyglade/ly/releases/latest | jq -r .tag_name)
          my_latest=v$(sed -n 's/.*Standards-Version: \(.*\)/\1/p' debian/control | head -n 1)
          if [ "$upstream_latest" != "$my_latest" ]; then
            echo "Upstream version is $upstream_latest, but my version is $my_latest"
            echo "version=${upstream_latest}" >> $GITHUB_OUTPUT
          else
            echo "Upstream version is $upstream_latest, and my version is $my_latest"
            echo "version=null" >> $GITHUB_OUTPUT
          fi

  release:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version != 'null'
    permissions:                # Job-level permissions configuration starts here
      contents: write           # 'write' access to repository contents
      pull-requests: write      # 'write' access to pull requests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Update debian files
        id: update
        run: |
          version=$(python3 update.py)
          tag="v${version}"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          git config --local user.name "github-actions[bot]"
          git config --local user.email "28209092+github-actions[bot]@users.noreply.github.com"
          git add debian/changelog debian/control
          git commit -m "Update to v${version}"
          git tag -d $tag || true
          git tag $tag
          sha=$(git rev-parse HEAD)
          echo "sha=$sha" >> $GITHUB_OUTPUT

      - name: Push changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          branch: ${{ github.head_ref }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true
          force: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ hashFiles('/Dockerfile') }}

      - name: Build
        run: |
          docker buildx create --use
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --load -t debian-builder .
          docker run --name debian-builder-container -v ${{ github.workspace }}:/data  debian-builder

      - name: Get package permalink
        run: |
          printf 'Build on: %s\n' "$(date)" >> release.txt
          printf 'SHA256:\n' >> release.txt
          for file in $(ls -1 release/*.deb); do
              echo "- ${file##*/}: \`$(sha256sum ${file} | cut -d' ' -f1)\`" >> release.txt
          done
          for file in $(ls -1 release/*.tgz); do
              echo "- ${file##*/}: \`$(sha256sum ${file} | cut -d' ' -f1)\`" >> release.txt
          done

      - name: Deploy deb to Fury
        env:
          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}
        run: |
          for file in $(ls -1 release/*.deb); do
              curl -F "package=@$file"  https://${FURY_TOKEN}@push.fury.io/machsix/
          done

      - name: Create release by uploading all the files in release folder
        uses: softprops/action-gh-release@v2.1.0
        with:
          files: release/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: release.txt
          tag_name: ${{ steps.update.outputs.tag }}
          target_commitish: ${{ steps.update.outputs.sha }}
          make_latest: true
          draft: false
          prerelease: false
